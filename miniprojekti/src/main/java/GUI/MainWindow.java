package GUI;

import Database.MockDatabase;
import Engine.IEngine;
import domain.Bibtex;
import domain.Kentta;
import domain.Viitetyyppi;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.io.FileNotFoundException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.EnumMap;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.ToolTipManager;
import javax.swing.text.JTextComponent;

public class MainWindow extends javax.swing.JFrame {

    private IEngine engine;
    private int x; //käytetään lomakkeen GridBagLayoutissa määrittämään gridx
    private int y; //käytetään lomakkeen GridBagLayoutissa määrittämään gridy

    /**
     * Creates new form MainWindow
     */
    public MainWindow() {
        engine = new Engine.EngineStub(new MockDatabase());
        initComponents();
        paivitaViitetyypit();

        x = 0;
        y = 0;

    }

    public MainWindow(IEngine engine) {
        this.engine = engine;
        initComponents();
        paivitaViitetyypit();

        x = 0;
        y = 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane1 = new javax.swing.JTabbedPane();
        jTabbedPane3 = new javax.swing.JTabbedPane();
        listaus = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        viitelista = new javax.swing.JList();
        poista = new javax.swing.JButton();
        muokkaa = new javax.swing.JButton();
        bibtex = new javax.swing.JButton();
        lisays = new javax.swing.JPanel();
        valitse = new javax.swing.JLabel();
        viitetyypit = new javax.swing.JComboBox();
        lisaa = new javax.swing.JButton();
        lomakeScroll = new javax.swing.JScrollPane();
        lomake = new javax.swing.JPanel();
        onPakollinen = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTabbedPane3.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jTabbedPane3FocusGained(evt);
            }
        });

        jScrollPane1.setViewportView(viitelista);

        poista.setText("Poista");
        poista.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poistaActionPerformed(evt);
            }
        });

        muokkaa.setText("Muokkaa");

        bibtex.setText("Luo BibTeX-tiedosto");
        bibtex.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                bibtexActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout listausLayout = new javax.swing.GroupLayout(listaus);
        listaus.setLayout(listausLayout);
        listausLayout.setHorizontalGroup(
            listausLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listausLayout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addGroup(listausLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, listausLayout.createSequentialGroup()
                        .addComponent(bibtex)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(muokkaa)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(poista))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(51, Short.MAX_VALUE))
        );
        listausLayout.setVerticalGroup(
            listausLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(listausLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 410, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(listausLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(poista)
                    .addComponent(muokkaa)
                    .addComponent(bibtex))
                .addContainerGap())
        );

        jTabbedPane3.addTab("Listaus", listaus);

        valitse.setText("Valitse viitetyyppi");

        viitetyypit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viitetyypitActionPerformed(evt);
            }
        });

        lisaa.setText("Lisää viite");
        lisaa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lisaaActionPerformed(evt);
            }
        });

        lomakeScroll.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));

        lomake.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        lomake.setLayout(null);
        lomakeScroll.setViewportView(lomake);

        onPakollinen.setText("*= pakollinen kenttä");

        javax.swing.GroupLayout lisaysLayout = new javax.swing.GroupLayout(lisays);
        lisays.setLayout(lisaysLayout);
        lisaysLayout.setHorizontalGroup(
            lisaysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lomakeScroll, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(lisaysLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(valitse)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(viitetyypit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, lisaysLayout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addComponent(onPakollinen)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 201, Short.MAX_VALUE)
                .addComponent(lisaa)
                .addGap(59, 59, 59))
        );
        lisaysLayout.setVerticalGroup(
            lisaysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(lisaysLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(lisaysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(valitse)
                    .addComponent(viitetyypit, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lomakeScroll, javax.swing.GroupLayout.DEFAULT_SIZE, 384, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(lisaysLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lisaa)
                    .addComponent(onPakollinen))
                .addContainerGap())
        );

        jTabbedPane3.addTab("Viitteen lisäys", lisays);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane3)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void poistaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poistaActionPerformed
        int valitutViitteet = viitelista.getSelectedValuesList().size();
        int valinta = 0;

        if (valitutViitteet == 0) {
            JOptionPane.showMessageDialog(this, "Ei valittuja viitteitä");
        } else if (valitutViitteet < 6) {
            String poistettavat = "";

            for (Object o : viitelista.getSelectedValuesList()) {
                poistettavat += o.toString() + "\n";
            }

            valinta = JOptionPane.showConfirmDialog(this, "Poistetaanko seuraavat viitteet:\n" + poistettavat);
        } else {
            valinta = JOptionPane.showConfirmDialog(this, "Poistetaanko " + valitutViitteet + " viitettä?");
        }

        if (valinta == JOptionPane.YES_OPTION) {
            int[] indeksit = new int[viitelista.getSelectedIndices().length];

            int i = viitelista.getSelectedIndices().length - 1;
            for (int luku : viitelista.getSelectedIndices()) {
                indeksit[i--] = luku;
            }

            for (Integer indeksi : indeksit) {
                engine.poistaViite(indeksi);
            }
        }

        paivitaViitelista();
    }//GEN-LAST:event_poistaActionPerformed

    private void jTabbedPane3FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jTabbedPane3FocusGained
        paivitaViitelista();

    }//GEN-LAST:event_jTabbedPane3FocusGained

    private void viitetyypitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viitetyypitActionPerformed

        lomake.removeAll();
        lomake.setLayout(new GridBagLayout());

        Viitetyyppi viitetyyppi = (Viitetyyppi) viitetyypit.getSelectedItem();

        Set<Kentta> pakollisetKentat = engine.getPakollisetKentat(viitetyyppi);
        Set<Kentta> muutKentat = engine.getEiPakollisetKentat(viitetyyppi);

        //luodaan alkuun pakolliset kentät tähden kera
        lisaaLomakkeeseen(pakollisetKentat, true);

        lisaaLomakkeeseen(muutKentat, false);
        //paivitetaan lomake-paneeli ja skrollaus
        lomake.validate();
        lomake.repaint();

        lomakeScroll.validate();

    }//GEN-LAST:event_viitetyypitActionPerformed

    private void lisaaLomakkeeseen(Set<Kentta> kentat, boolean pakollinen) {
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.insets = new Insets(4, 4, 4, 4);

        //Kirjalla täytyy olla joko kirjoittaja tai editori, joten  käydään tämä erikoistapaus
        //läpi ensiksi
        Viitetyyppi tyyppi = Viitetyyppi.valueOf(viitetyypit.getSelectedItem().toString());

        if (tyyppi == Viitetyyppi.book && pakollinen) {
            JComboBox valinta = new JComboBox(new Kentta[]{Kentta.author, Kentta.editor});
            valinta.setName("kirja");
            gbc.anchor = GridBagConstraints.SOUTHEAST;
            lomake.add(valinta, gbc);

            x++;
            gbc.gridx = x;

            JTextArea tekstikentta = new JTextArea(1, 20);
            tekstikentta.setLineWrap(true);
            tekstikentta.setWrapStyleWord(true);
            tekstikentta.setMargin(new Insets(2, 2, 2, 2));
            //asetetaan tekstikentälle sama nimi kuin comboboxilla jotta ne voidaan tunnistaa myöhemmin
            tekstikentta.setName(valinta.getName());
            tekstikentta.setToolTipText("Erottele henkilöt pilkulla");
            lomake.add(tekstikentta, gbc);

            x++;
            gbc.gridx = x;

            lomake.add(new JLabel("*"), gbc);

            y++;
            x = 0;

            //lisätään seuraavaksi muut kentät silmukassa joten poistetaan ensin nämä, etteivät tule kahdesti
            kentat.remove(Kentta.author);
            kentat.remove(Kentta.editor);
        }

        for (Kentta kentta : kentat) {
            gbc.gridx = x;
            gbc.gridy = y;

            //kenttien nimet tulevat tekstialueiden viereen
            gbc.anchor = GridBagConstraints.NORTHEAST;

            String nimi = kentta.toString();
            lomake.add(new JLabel(nimi), gbc);

            x++;

            JTextArea tekstikentta = new JTextArea(1, 20);
            tekstikentta.setLineWrap(true);
            tekstikentta.setWrapStyleWord(true);
            tekstikentta.setMargin(new Insets(2, 2, 2, 2));
            tekstikentta.setName(nimi);

            if (kentta == Kentta.pages) {
                tekstikentta.setToolTipText("Anna sivut muodossa: 21, 21-40 tai 21+");
            }

            if (kentta == Kentta.author || kentta == Kentta.editor) {
                tekstikentta.setToolTipText("Erottele henkilöt pilkulla");
            }

            gbc.gridx = x;
            lomake.add(tekstikentta, gbc);

            if (pakollinen) {
                x++;
                gbc.gridx = x;

                lomake.add(new JLabel("*"), gbc);
            }

            y++;
            x = 0;
        }

        //tooltip-viesti näytetään heti, kun osoitin tekstikentän päällä
        ToolTipManager.sharedInstance().setInitialDelay(0);
    }

    private void lisaaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lisaaActionPerformed
        Map<Kentta, String> lomakkeenSisalto = haeLomakkeenTiedot();
        Viitetyyppi lisattavanViitteenTyyppi = Viitetyyppi.valueOf(viitetyypit.getSelectedItem().toString());

        ArrayList<String> virheet = engine.lisaaViite(lisattavanViitteenTyyppi, lomakkeenSisalto);

        if (virheet != null) {
            String virheviesti = "";

            for (String virhe : virheet) {
                virheviesti += virhe + "\n";
            }

            JOptionPane.showMessageDialog(this, virheviesti);
        } else {
            JOptionPane.showMessageDialog(this, "Viite lisättiin onnistuneesti");
            tyhjennaKentat();
        }
    }//GEN-LAST:event_lisaaActionPerformed

    private void bibtexActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_bibtexActionPerformed
        // TODO add your handling code here:
        Bibtex bibtex = new Bibtex(engine);
        String tiedosto = (String) JOptionPane.showInputDialog(this,
                "Anna tiedoston nimi, johon tallennetaan (ilman tiedostopäätettä)", JOptionPane.PLAIN_MESSAGE);
        try {
            bibtex.generoiTiedosto(tiedosto + ".bib");
            JOptionPane.showMessageDialog(this, "Projektin juureen on nyt lisätty " + tiedosto + ".bib niminen tiedosto.");
        } catch (FileNotFoundException ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_bibtexActionPerformed

    public EnumMap<Kentta, String> haeLomakkeenTiedot() {
        EnumMap<Kentta, String> lomakkeenSisalto = new EnumMap(Kentta.class);

        Component[] komponentit = lomake.getComponents();

        //näihin tallenetaan kirjalomakkeen comoboxissa valittu kenttä ja comboboxin nimi, jotta
        //voidaan yhdistää ne oikeaan tekstikenttään
        Kentta valittuKentta = null;
        String kirjaCombonNimi = "";

        for (Component komponentti : komponentit) {
            if (komponentti instanceof JComboBox) {
                //kirjan lomakkeessa on combobox, jossa valittuna editor tai author
                JComboBox authorEditor = (JComboBox) komponentti;
                valittuKentta = (Kentta) authorEditor.getSelectedItem();
                kirjaCombonNimi = authorEditor.getName();
            }

            if (komponentti instanceof JTextComponent) {
                Kentta kentta = null;
                String syote = "";

                JTextComponent tekstikentta = (JTextComponent) komponentti;

                if (tekstikentta.getName().equals(kirjaCombonNimi)) {
                    kentta = valittuKentta;
                } else {
                    kentta = Kentta.valueOf(tekstikentta.getName());
                }

                syote = tekstikentta.getText();

            if (!syote.isEmpty()) {
                lomakkeenSisalto.put(kentta, syote);
            }
        }
        System.out.println("haettiin lomakkeesta: " + lomakkeenSisalto);
        return lomakkeenSisalto;
    }

    private void tyhjennaKentat() {
        Component[] komponentit = lomake.getComponents();

        for (Component komponentti : komponentit) {
            if (komponentti instanceof JTextComponent) {
                JTextComponent tekstikentta = (JTextComponent) komponentti;
                tekstikentta.setText("");
            }
        }
    }

    private void paivitaViitetyypit() {
        //combobox luodaan automaattisesti mutta sen arvot eivät ole oikein joten päivitetään ne
        viitetyypit.removeAllItems();

        Viitetyyppi[] tyypit = engine.getViitetyypit();

        viitetyypit.setModel(new DefaultComboBoxModel(tyypit));
        viitetyypit.setSelectedIndex(0);
    }

    /**
     * Päivittää viitteiden listausnäkymän
     */
    private void paivitaViitelista() {
        String[] sisalto = engine.listaaKaikkiViitteet();
        viitelista.setListData(sisalto);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton bibtex;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTabbedPane jTabbedPane3;
    private javax.swing.JButton lisaa;
    private javax.swing.JPanel lisays;
    private javax.swing.JPanel listaus;
    private javax.swing.JPanel lomake;
    private javax.swing.JScrollPane lomakeScroll;
    private javax.swing.JButton muokkaa;
    private javax.swing.JLabel onPakollinen;
    private javax.swing.JButton poista;
    private javax.swing.JLabel valitse;
    private javax.swing.JList viitelista;
    private javax.swing.JComboBox viitetyypit;
    // End of variables declaration//GEN-END:variables
}
